#ifndef observables_cuh_
#define observables_cuh_

#include "event.cuh"
#include "histogram.cuh"

// add analyses here
#include "eventshapes.cuh"
#include "jets.cuh"

class analysis {
  /**
   * @class analysis
   * @brief analysis of the observables
   *
   * this class is used to analyse the observables generated by the shower
   * and calculate the necessary histograms for the rivet analysis[1]
   *
   * [1] rivet: https://rivet.hepforge.org/
   */

 public:
  // ---------------------------------------------------------------------------
  // member variables

  histo1d hists[10];

  double wtot;  // scale by weight for 1/sigma d(sigma)/d observable
  double ntot;  // scale by number for d(sigma)/d observable

  // ---------------------------------------------------------------------------
  // constructor

  // can't have strings as device variables, in future could use char*
  __host__ __device__ analysis() : wtot(0.), ntot(0.) {
    // lep: e+ e- -> q qbar

    hists[0] = histo1d(-4.3, -0.3, "/gaps/log10y23\n");
    hists[1] = histo1d(-4.3, -0.3, "/gaps/log10y34\n");
    hists[2] = histo1d(-4.3, -0.3, "/gaps/log10y45\n");
    hists[3] = histo1d(-4.3, -0.3, "/gaps/log10y56\n");
    hists[4] = histo1d(0., 0.5, "/gaps/tvalue\n");
    hists[5] = histo1d(0., 0.5, "/gaps/tzoomd\n");
    hists[6] = histo1d(0., 1., "/gaps/hjm\n");
    hists[7] = histo1d(0., 0.5, "/gaps/ljm\n");
    hists[8] = histo1d(0., 0.5, "/gaps/wjb\n");
    hists[9] = histo1d(0., 0.2, "/gaps/njb\n");
  }
};

// ---------------------------------------------------------------------------
// kernels and wrappers

// validate events - colour and momentum conservation
__global__ void validate_events(event* events, int* invalid, int n);

// fill histograms simultaneously
__global__ void fill_histos(analysis* an, const event* events, double* results,
                            int n);

// analysis wrapped in a function
void do_analysis(thrust::device_vector<event>& d_events, std::string filename,
                 int blocks, int threads);

#endif  // observables_cuh_