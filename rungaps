#!/usr/bin/env python3

# ------------------------------------------------------------------------------

"""
GAPS - Run Script
-----------------
This script is used to compile and run the GPU and CPU Shower codes. It
provides a number of options to control the number of events, the number of
cores to use, and the type of run to perform. The run types are:
    - gpu: Run the GPU simulation
    - cpu: Run the CPU Shower simulation
    - compare: Run both the GPU and CPU Shower and compare the results
    - full: Run both the GPU and CPU Shower for a range of event numbers
"""

# ------------------------------------------------------------------------------
# Modules

import argparse
import os
import shutil
import subprocess

# ------------------------------------------------------------------------------
# Functions

from gaps.interface.logo import print_logo
from gaps.interface.compile import compile_code
from gaps.interface.run import run


# ------------------------------------------------------------------------------
# Emission Tracking with CodeCarbon

codecarbon_available = False
try:
    from codecarbon import OfflineEmissionsTracker
    codecarbon_available = True
except ImportError:
    codecarbon_available = False


# ------------------------------------------------------------------------------
# Parse the Arguments

def parse_arguments():
    # Set up argument parser
    p = argparse.ArgumentParser(description='Run GPU or CPU Shower')

    # Run type
    p.add_argument('-r', '--runtype',
                   type=str,
                   default='gpu',
                   choices=['gpu', 'cpu', 'compare', 'full'],
                   help='choose run type (default: gpu)')

    # Process and Parameters
    p.add_argument('-p', '--process',
                   type=str,
                   choices=['LEP', 'LHC'],
                   default='LEP',
                   help='set the process (default: LEP)')

    p.add_argument('-nlo', '--nlo',
                   action='store_true',
                   help='enable NLO corrections (default: False)')

    p.add_argument('-e', '--root_s',
                   type=float,
                   help='set the Centre of Mass Energy, sqrt(s)')

    # Shower Parameters
    p.add_argument('-asmz', '--asmz',
                   type=float,
                   default=0.118,
                   help='set the strong coupling asmz (default: 0.118)')

    p.add_argument('-t_c', '--t_c',
                   type=float,
                   default=1.0,
                   help='set the shower cutoff in GeV (default: 1.0 GeV)')

    p.add_argument('-n_em_max', '--n_emissions_max',
                   type=int,
                   default=1000,
                   help='set the maximum number of emissions (default: 1000)')

    # Run options
    p.add_argument('-n', '--nevents',
                   type=int,
                   default=10000,
                   help='set the number of events (default: 10000)')

    # Profiling
    p.add_argument('-nsys', '--nsysprofile',
                   action='store_true',
                   help='enable nsys profiling')

    p.add_argument('-codecarbon', '--codecarbon',
                   action='store_true',
                   help='enable codecarbon emissions tracking')

    p.add_argument('-gprof', '--gprof',
                   action='store_true',
                   help='Enable gprof profiling for CPU Shower')

    # GPU and GPU Tuning
    p.add_argument('-t', '--threads',
                   type=int,
                   default=256,
                   help='set the number of threads per block (default: 256)')

    # Parse the arguments
    args = p.parse_args()
    return args

# ------------------------------------------------------------------------------
# Adjust the root_s value based on the process - if not provided


def adjust_root_s(args):
    # Adjust root_s if not provided
    if args.root_s is None:
        if args.process == 'LEP':
            args.root_s = 91.2
        elif args.process == 'LHC':
            args.root_s = 13000.0

# ------------------------------------------------------------------------------
# Compile and Run the Code


def compile_and_run(args):

    # --------------------------------------------------------------------------
    # Compile the code

    if args.runtype in ['gpu', 'compare', 'full']:
        compile_ok = compile_code('gpu', args)
        if not compile_ok:
            print("GPU compilation failed. Exiting.")
            return

    if args.runtype in ['cpu', 'compare', 'full']:
        compile_ok = compile_code('cpu', args)
        if not compile_ok:
            print("CPU compilation failed. Exiting.")
            return

    # --------------------------------------------------------------------------
    # Run the code

    if args.runtype in ['gpu', 'compare']:
        if (codecarbon_available and args.codecarbon):
            tracker = OfflineEmissionsTracker(
                country_iso_code="GBR",
                output_file="gpu-emissions.dat",
                measure_power_secs=5,
                tracking_mode="process")
            tracker.start()
            run('gpu', args)
            tracker.stop()
        else:
            run('gpu', args)

    if args.runtype in ['cpu', 'compare']:
        if (codecarbon_available and args.codecarbon):
            tracker = OfflineEmissionsTracker(
                country_iso_code="GBR",
                output_file="cpu-emissions.dat",
                measure_power_secs=5,
                tracking_mode="process",
                # Used to avoid tracking gpus (unless there is a 1000th gpu!)
                gpu_ids="1000")
            tracker.start()
            run('cpu', args)
            tracker.stop()
        else:
            run('cpu', args)

    # --------------------------------------------------------------------------
    # Full Run - Compare Execution Times

    if args.runtype == 'full':
        # Remove previous results and make folder
        if os.path.exists('results'):
            shutil.rmtree('results')
        os.makedirs('results', exist_ok=True)

        # Clear previous log files
        if os.path.exists('cpu-time.dat'):
            os.remove('cpu-time.dat')
        if os.path.exists('gpu-time.dat'):
            os.remove('gpu-time.dat')
        if os.path.exists('cpu-emissions.dat'):
            os.remove('cpu-emissions.dat')
        if os.path.exists('gpu-emissions.dat'):
            os.remove('gpu-emissions.dat')

        # Run the comparison 100 times, for different number of events
        n_list = [1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000,
                  5000, 10000, 20000, 50000, 100000, 200000, 500000, 1000000]
        for n in n_list:

            # for cpu, n=100000 and above take too long
            # i.e. measurement of time taken is very precise for these.
            # Can reduce the number of repetitions to save time.
            nrepcpu = 10
            nrepgpu = 10

            # Run the gpu simulation
            for i in range(nrepgpu):
                args.nevents = n
                print(f"Running GPU Shower with {n} events: " +
                      str(i+1) + " of " + str(nrepgpu))
                if codecarbon_available and args.codecarbon:
                    # Set up codecarbon tracking if available
                    tracker_gpu = OfflineEmissionsTracker(
                        country_iso_code="GBR",
                        output_file="gpu-emissions.dat",
                        measure_power_secs=5,
                        tracking_mode="process")
                    tracker_gpu.start()
                    run('gpu', args)
                    tracker_gpu.stop()
                else:
                    run('gpu', args)

            # Run the cpu simulation
            for i in range(nrepcpu):
                args.nevents = n
                print(f"Running CPU Shower with {n} events" +
                      str(i+1) + " of " + str(nrepcpu))
                if codecarbon_available and args.codecarbon:
                    tracker_cpu = OfflineEmissionsTracker(
                        country_iso_code="GBR",
                        output_file="cpu-emissions.dat",
                        measure_power_secs=5,
                        tracking_mode="process",
                        # Used to avoid tracking gpus (unless there is a 1000th gpu!)
                        gpu_ids="1000")
                    tracker_cpu.start()
                    run("cpu", args)
                    tracker_cpu.stop()
                else:
                    run("cpu", args)

        # Move the log files to the results directory
        shutil.move('cpu-time.dat', 'results/')
        shutil.move('gpu-time.dat', 'results/')
        shutil.move('cpu.yoda', 'results/')
        shutil.move('gpu.yoda', 'results/')


# ------------------------------------------------------------------------------
# Main Function


def main():

    # Get the arguments
    args = parse_arguments()
    adjust_root_s(args)

    # Print the GAPS logo
    print_logo(args)

    # Compile and run the code
    compile_and_run(args)


if __name__ == "__main__":
    main()
