#!/usr/bin/env python3

"""
This script runs the GAPS GPU simulation for various energies and asmz values,
performing the NLL Test for alpha_s(M_Z) = 0.2.

You need to:
- Have a build of Yoda activated in your environment
- Increase max_particles in base.cuh to 200
- Increase n_bins in base.cuh to 500
- Activate log bins in observables.cuh
- Remove the thrust cutoff in eventshapes.cu
- Move this file outside test
- Run!
"""

import subprocess
import glob
import sys
import os
import time
import argparse


# Ensure script is run from project root (not from gaps/test)
if os.path.basename(os.getcwd()) == 'test' and os.path.basename(os.path.dirname(os.getcwd())) == 'gaps':
    print(f"Current working directory: {os.getcwd()}")
    print("Please run this script from the project root (gaps-devel), not from gaps/test.")
    exit(1)

from gaps.interface.compile import compile_code
from gaps.interface.run import run_gpu_repeated

# Ensure GAPS is compiled
temp_args = argparse.Namespace(gprof=False)
compile_code("gpu", temp_args)

# Number of events to run
NEVENTS = 10000000

# Energy and asmz values for the runs - this is asL = 0.2
ENERGIES = ["1000.0", "5446.18", "29660.9", "161539.0", "879770.0", "4791390.0", "26094800.0"]
ASMZ_VALUES = ["0.118", "0.059", "0.0393", "0.0295", "0.0236", "0.0197", "0.0169"]

start_time = time.time()

for energy, asmz in zip(ENERGIES, ASMZ_VALUES):
    print(f"\nRunning for energy={energy}, asmz={asmz}")

    # Prepare arguments using argparse.Namespace for clarity
    
    args = argparse.Namespace(
        nlo=True,
        root_s=energy,
        asmz=asmz,
        t_c=1.0,
        n_emissions_max=1000,
        nevents=NEVENTS,
        threads=64,
        nsysprofile=False,
        runtype='gpu'
    )

    # Run the GPU simulation in batches
    run_gpu_repeated(args, do_zip=False)

    # Merge YODA files for this run
    energy_str = str(energy).replace('.', 'p')
    asmz_str = str(asmz).replace('.', 'p')
    outname = f"gaps_{energy_str}GeV_as{asmz_str}.yoda"
    yoda_files = glob.glob('gpu-*.yoda')
    if yoda_files:
        subprocess.run(['yodamerge', '-o', outname] + yoda_files, check=True)
        # Optionally clean up batch files
        for f in yoda_files:
            os.remove(f)
    else:
        print("No gpu-*.yoda files found to merge!")

# Print total time taken
end_time = time.time()
print(f"\nTotal time taken: {end_time - start_time:.2f} seconds")
print("All runs completed successfully.")